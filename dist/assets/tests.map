{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","ember-search-likes/tests/adapters/application.lint-test.js","ember-search-likes/tests/adapters/user.lint-test.js","ember-search-likes/tests/app.lint-test.js","ember-search-likes/tests/authenticators/custom-vk-auth.lint-test.js","ember-search-likes/tests/helpers/destroy-app.js","ember-search-likes/tests/helpers/destroy-app.lint-test.js","ember-search-likes/tests/helpers/ember-simple-auth.js","ember-search-likes/tests/helpers/module-for-acceptance.js","ember-search-likes/tests/helpers/module-for-acceptance.lint-test.js","ember-search-likes/tests/helpers/resolver.js","ember-search-likes/tests/helpers/resolver.lint-test.js","ember-search-likes/tests/helpers/start-app.js","ember-search-likes/tests/helpers/start-app.lint-test.js","ember-search-likes/tests/integration/pods/components/friends-list/component-test.js","ember-search-likes/tests/integration/pods/components/friends-list/component-test.lint-test.js","ember-search-likes/tests/integration/pods/components/last-seen-platform/component-test.js","ember-search-likes/tests/integration/pods/components/last-seen-platform/component-test.lint-test.js","ember-search-likes/tests/integration/pods/components/sec-tion/component-test.js","ember-search-likes/tests/integration/pods/components/sec-tion/component-test.lint-test.js","ember-search-likes/tests/integration/pods/components/user-card/component-test.js","ember-search-likes/tests/integration/pods/components/user-card/component-test.lint-test.js","ember-search-likes/tests/integration/pods/components/user-status-online/component-test.js","ember-search-likes/tests/integration/pods/components/user-status-online/component-test.lint-test.js","ember-search-likes/tests/macros/search-array-by-prop.lint-test.js","ember-search-likes/tests/models/user.lint-test.js","ember-search-likes/tests/pods/application/controller.lint-test.js","ember-search-likes/tests/pods/application/route.lint-test.js","ember-search-likes/tests/pods/authenticated/friends/controller.lint-test.js","ember-search-likes/tests/pods/authenticated/friends/friend/route.lint-test.js","ember-search-likes/tests/pods/authenticated/friends/index/controller.lint-test.js","ember-search-likes/tests/pods/authenticated/friends/index/route.lint-test.js","ember-search-likes/tests/pods/authenticated/friends/route.lint-test.js","ember-search-likes/tests/pods/authenticated/index/route.lint-test.js","ember-search-likes/tests/pods/authenticated/route.lint-test.js","ember-search-likes/tests/pods/components/friends-list/component.lint-test.js","ember-search-likes/tests/pods/components/last-seen-platform/component.lint-test.js","ember-search-likes/tests/pods/components/sec-tion/component.lint-test.js","ember-search-likes/tests/pods/components/user-card/component.lint-test.js","ember-search-likes/tests/pods/components/user-status-online/component.lint-test.js","ember-search-likes/tests/pods/hello/controller.lint-test.js","ember-search-likes/tests/pods/hello/route.lint-test.js","ember-search-likes/tests/resolver.lint-test.js","ember-search-likes/tests/router.lint-test.js","ember-search-likes/tests/serializers/application.lint-test.js","ember-search-likes/tests/serializers/user.lint-test.js","ember-search-likes/tests/services/config.lint-test.js","ember-search-likes/tests/services/vk-service.lint-test.js","ember-search-likes/tests/test-helper.js","ember-search-likes/tests/test-helper.lint-test.js","ember-search-likes/tests/unit/adapters/application-test.js","ember-search-likes/tests/unit/adapters/application-test.lint-test.js","ember-search-likes/tests/unit/adapters/friend-test.js","ember-search-likes/tests/unit/adapters/friend-test.lint-test.js","ember-search-likes/tests/unit/adapters/user-test.js","ember-search-likes/tests/unit/adapters/user-test.lint-test.js","ember-search-likes/tests/unit/initializers/social-init-test.js","ember-search-likes/tests/unit/initializers/social-init-test.lint-test.js","ember-search-likes/tests/unit/models/base-user-test.js","ember-search-likes/tests/unit/models/base-user-test.lint-test.js","ember-search-likes/tests/unit/models/friend-test.js","ember-search-likes/tests/unit/models/friend-test.lint-test.js","ember-search-likes/tests/unit/models/user-test.js","ember-search-likes/tests/unit/models/user-test.lint-test.js","ember-search-likes/tests/unit/pods/application/controller-test.js","ember-search-likes/tests/unit/pods/application/controller-test.lint-test.js","ember-search-likes/tests/unit/pods/application/route-test.js","ember-search-likes/tests/unit/pods/application/route-test.lint-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/controller-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/controller-test.lint-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/friend/route-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/friend/route-test.lint-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/index/controller-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/index/controller-test.lint-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/index/route-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/index/route-test.lint-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/route-test.js","ember-search-likes/tests/unit/pods/authenticated/friends/route-test.lint-test.js","ember-search-likes/tests/unit/pods/authenticated/index/route-test.js","ember-search-likes/tests/unit/pods/authenticated/index/route-test.lint-test.js","ember-search-likes/tests/unit/pods/authenticated/route-test.js","ember-search-likes/tests/unit/pods/authenticated/route-test.lint-test.js","ember-search-likes/tests/unit/pods/hello/controller-test.js","ember-search-likes/tests/unit/pods/hello/controller-test.lint-test.js","ember-search-likes/tests/unit/pods/hello/route-test.js","ember-search-likes/tests/unit/pods/hello/route-test.lint-test.js","ember-search-likes/tests/unit/serializers/application-test.js","ember-search-likes/tests/unit/serializers/application-test.lint-test.js","ember-search-likes/tests/unit/serializers/friend-test.js","ember-search-likes/tests/unit/serializers/friend-test.lint-test.js","ember-search-likes/tests/unit/serializers/user-test.js","ember-search-likes/tests/unit/serializers/user-test.lint-test.js","ember-search-likes/tests/unit/services/config-test.js","ember-search-likes/tests/unit/services/config-test.lint-test.js","ember-search-likes/tests/unit/services/vk-service-test.js","ember-search-likes/tests/unit/services/vk-service-test.lint-test.js","ember-search-likes/tests/utils/get-params.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('ember-search-likes/tests/adapters/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/adapters/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - adapters/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/user.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/authenticators/custom-vk-auth.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - authenticators/custom-vk-auth.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/custom-vk-auth.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/helpers/destroy-app', ['exports', 'ember-runloop'], function (exports, _emberRunloop) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    (0, _emberRunloop['default'])(application, 'destroy');\n  }\n});","define('ember-search-likes/tests/helpers/destroy-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/destroy-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _emberSimpleAuthAuthenticatorsTest) {\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _emberSimpleAuthAuthenticatorsTest['default']);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  }\n});\n/* global wait */","define('ember-search-likes/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'ember-search-likes/tests/helpers/start-app', 'ember-search-likes/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _emberSearchLikesTestsHelpersStartApp, _emberSearchLikesTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _emberSearchLikesTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _emberSearchLikesTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('ember-search-likes/tests/helpers/module-for-acceptance.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/module-for-acceptance.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/helpers/resolver', ['exports', 'ember-search-likes/resolver', 'ember-search-likes/config/environment'], function (exports, _emberSearchLikesResolver, _emberSearchLikesConfigEnvironment) {\n\n  var resolver = _emberSearchLikesResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _emberSearchLikesConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _emberSearchLikesConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('ember-search-likes/tests/helpers/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/helpers/start-app', ['exports', 'ember-runloop', 'ember-platform', 'ember-search-likes/app', 'ember-search-likes/config/environment'], function (exports, _emberRunloop, _emberPlatform, _emberSearchLikesApp, _emberSearchLikesConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = (0, _emberPlatform.assign)({}, _emberSearchLikesConfigEnvironment['default'].APP);\n    attributes = (0, _emberPlatform.assign)(attributes, attrs); // use defaults, but you can override\n\n    (0, _emberRunloop['default'])(function () {\n      application = _emberSearchLikesApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('ember-search-likes/tests/helpers/start-app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - helpers/start-app.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/friends-list/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('friends-list', 'Integration | Component | friends list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'SPvY3mDM',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"friends-list\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'V6VF56Gd',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"friends-list\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/friends-list/component-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/pods/components/friends-list/component-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/friends-list/component-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/last-seen-platform/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('last-seen-platform', 'Integration | Component | last seen platform', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'jct/9OF0',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"last-seen-platform\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'yqU62qvC',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"last-seen-platform\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/last-seen-platform/component-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/pods/components/last-seen-platform/component-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/last-seen-platform/component-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/sec-tion/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('sec-tion', 'Integration | Component | sec tion', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'T/XZ+Gp+',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"sec-tion\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': '8lomdLNf',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"sec-tion\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/sec-tion/component-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/pods/components/sec-tion/component-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/sec-tion/component-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/user-card/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-card', 'Integration | Component | user card', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'WPWngb3C',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"user-card\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'X2UPIis3',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"user-card\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/user-card/component-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/pods/components/user-card/component-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/user-card/component-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/user-status-online/component-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('user-status-online', 'Integration | Component | user status online', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': 'nEUG9iEw',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"user-status-online\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'EtAyz0wG',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"user-status-online\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('ember-search-likes/tests/integration/pods/components/user-status-online/component-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - integration/pods/components/user-status-online/component-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/pods/components/user-status-online/component-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/macros/search-array-by-prop.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - macros/search-array-by-prop.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'macros/search-array-by-prop.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/models/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - models/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/application/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/application/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/controller.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/application/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/application/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/application/route.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/authenticated/friends/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/authenticated/friends/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/authenticated/friends/controller.js should pass ESLint.\\n2:8  - \\'computed\\' is defined but never used. (no-unused-vars)\\n2:19  - \\'reads\\' is defined but never used. (no-unused-vars)\\n2:26  - \\'filterBy\\' is defined but never used. (no-unused-vars)\\n3:9  - \\'conditional\\' is defined but never used. (no-unused-vars)\\n3:22  - \\'and\\' is defined but never used. (no-unused-vars)\\n3:27  - \\'not\\' is defined but never used. (no-unused-vars)\\n3:32  - \\'equal\\' is defined but never used. (no-unused-vars)\\n4:8  - \\'searchArrayByProp\\' is defined but never used. (no-unused-vars)');\n  });\n});","define('ember-search-likes/tests/pods/authenticated/friends/friend/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/authenticated/friends/friend/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/authenticated/friends/friend/route.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/authenticated/friends/index/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/authenticated/friends/index/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/authenticated/friends/index/controller.js should pass ESLint.\\n49:3  - Parsing error: Unexpected token ) (null)');\n  });\n});","define('ember-search-likes/tests/pods/authenticated/friends/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/authenticated/friends/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/authenticated/friends/index/route.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/authenticated/friends/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/authenticated/friends/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/authenticated/friends/route.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/authenticated/index/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/authenticated/index/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/authenticated/index/route.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/authenticated/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/authenticated/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/authenticated/route.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/components/friends-list/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/components/friends-list/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/friends-list/component.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/components/last-seen-platform/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/components/last-seen-platform/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/last-seen-platform/component.js should pass ESLint.\\n26:39  - Infix operators must be spaced. (space-infix-ops)');\n  });\n});","define('ember-search-likes/tests/pods/components/sec-tion/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/components/sec-tion/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/sec-tion/component.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/components/user-card/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/components/user-card/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/components/user-card/component.js should pass ESLint.\\n17:1  - Trailing spaces not allowed. (no-trailing-spaces)');\n  });\n});","define('ember-search-likes/tests/pods/components/user-status-online/component.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/components/user-status-online/component.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/components/user-status-online/component.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/hello/controller.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/hello/controller.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'pods/hello/controller.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/pods/hello/route.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - pods/hello/route.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'pods/hello/route.js should pass ESLint.\\n68:28  - Unexpected mix of \\'&&\\' and \\'||\\'. (no-mixed-operators)\\n68:40  - Unexpected mix of \\'&&\\' and \\'||\\'. (no-mixed-operators)\\n68:40  - Unexpected mix of \\'||\\' and \\'&&\\'. (no-mixed-operators)\\n68:45  - Unexpected mix of \\'||\\' and \\'&&\\'. (no-mixed-operators)');\n  });\n});","define('ember-search-likes/tests/resolver.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - resolver.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/router.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - router.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass ESLint.\\n14:35  - Missing space before function parentheses. (space-before-function-paren)');\n  });\n});","define('ember-search-likes/tests/serializers/application.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/application.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/serializers/user.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - serializers/user.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/user.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/services/config.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/config.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/config.js should pass ESLint.\\n3:7  - \\'ENV\\' is assigned a value but never used. (no-unused-vars)\\n5:8  - \\'computed\\' is defined but never used. (no-unused-vars)');\n  });\n});","define('ember-search-likes/tests/services/vk-service.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - services/vk-service.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/vk-service.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/test-helper', ['exports', 'ember-search-likes/tests/helpers/resolver', 'ember-qunit'], function (exports, _emberSearchLikesTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_emberSearchLikesTestsHelpersResolver['default']);\n});","define('ember-search-likes/tests/test-helper.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - test-helper.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ember-search-likes/tests/unit/adapters/application-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/adapters/application-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/adapters/friend-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:friend', 'Unit | Adapter | friend', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ember-search-likes/tests/unit/adapters/friend-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/adapters/friend-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/friend-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/adapters/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:user', 'Unit | Adapter | user', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('ember-search-likes/tests/unit/adapters/user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/adapters/user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/initializers/social-init-test', ['exports', 'ember', 'ember-search-likes/initializers/social-init', 'qunit', 'ember-search-likes/tests/helpers/destroy-app'], function (exports, _ember, _emberSearchLikesInitializersSocialInit, _qunit, _emberSearchLikesTestsHelpersDestroyApp) {\n\n  (0, _qunit.module)('Unit | Initializer | social init', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      _ember['default'].run(function () {\n        _this.application = _ember['default'].Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _emberSearchLikesTestsHelpersDestroyApp['default'])(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _emberSearchLikesInitializersSocialInit.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('ember-search-likes/tests/unit/initializers/social-init-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/initializers/social-init-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/social-init-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/models/base-user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('base-user', 'Unit | Model | base user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store()\n    assert.ok(!!model);\n  });\n});","define('ember-search-likes/tests/unit/models/base-user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/base-user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/base-user-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/models/friend-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('friend', 'Unit | Model | friend', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store()\n    assert.ok(!!model);\n  });\n});","define('ember-search-likes/tests/unit/models/friend-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/friend-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/friend-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store()\n    assert.ok(!!model);\n  });\n});","define('ember-search-likes/tests/unit/models/user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/models/user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/application/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-search-likes/tests/unit/pods/application/controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/application/controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/controller-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/application/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-search-likes/tests/unit/pods/application/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/application/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/application/route-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:authenticated/friends', 'Unit | Controller | authenticated/friends', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/authenticated/friends/controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/authenticated/friends/controller-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/friend/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:authenticated/friends/friend', 'Unit | Route | authenticated/friends/friend', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/friend/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/authenticated/friends/friend/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/authenticated/friends/friend/route-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/index/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:authenticated/friends/index', 'Unit | Controller | authenticated/friends/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/index/controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/authenticated/friends/index/controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/authenticated/friends/index/controller-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:authenticated/friends/index', 'Unit | Route | authenticated/friends/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/index/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/authenticated/friends/index/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/authenticated/friends/index/route-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:authenticated/friends', 'Unit | Route | authenticated/friends', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/friends/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/authenticated/friends/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/authenticated/friends/route-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/index/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:authenticated/index', 'Unit | Route | authenticated/index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/index/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/authenticated/index/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/authenticated/index/route-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:authenticated', 'Unit | Route | authenticated', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-search-likes/tests/unit/pods/authenticated/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/authenticated/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/authenticated/route-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/hello/controller-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:hello', 'Unit | Controller | hello', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('ember-search-likes/tests/unit/pods/hello/controller-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/hello/controller-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/hello/controller-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/pods/hello/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('ember-search-likes/tests/unit/pods/hello/route-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/pods/hello/route-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/pods/hello/route-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/serializers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('application', 'Unit | Serializer | application', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('ember-search-likes/tests/unit/serializers/application-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/serializers/application-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/serializers/friend-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('friend', 'Unit | Serializer | friend', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:friend']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('ember-search-likes/tests/unit/serializers/friend-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/serializers/friend-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/friend-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/serializers/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Serializer | user', {\n    // Specify the other units that are required for this test.\n    needs: ['serializer:user']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var record = this.subject();\n\n    var serializedRecord = record.serialize();\n\n    assert.ok(serializedRecord);\n  });\n});","define('ember-search-likes/tests/unit/serializers/user-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/serializers/user-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/user-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/services/config-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:config', 'Unit | Service | config', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ember-search-likes/tests/unit/services/config-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/config-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/config-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/unit/services/vk-service-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:vk-service', 'Unit | Service | vk service', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('ember-search-likes/tests/unit/services/vk-service-test.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - unit/services/vk-service-test.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/vk-service-test.js should pass ESLint.\\n');\n  });\n});","define('ember-search-likes/tests/utils/get-params.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint - utils/get-params.js');\n  QUnit.test('should pass ESLint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/get-params.js should pass ESLint.\\n');\n  });\n});","/* jshint ignore:start */\n\nrequire('ember-search-likes/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}